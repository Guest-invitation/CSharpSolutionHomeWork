// Задача 25: Напишите цикл, который принимает на вход два числа (A и B) 
// и возводит число A в натуральную степень B.

// 3, 5 -> 243 (3⁵)
// 2, 4 -> 16

// Задача состоит в том, чтобы не просто возвести A в степень B 
// (то есть сделать это командами введите А, введите B, а потом подставить это все в сроку Math.Pow(A, B)
// которая возмовит число A, в степень B), а сделать это через цикл!

namespace GB.Task25
{
    class Program
    {
        static void Main(string[] asgs)
        {
            // Выводим сообщение, что должен делать пользователь
            Console.WriteLine("Введите число A и мы возведем его в степень B!");
            // Просим ввести A 
            Console.Write("A: ");
            // Принимаем значения A и выделяем для него мето в переменной numA, 
            // так как число A может быть и натуральным (1, 5, 15) 
            // и дробным (с остатком - 2,5; 4,25 и т.д), то присваиваем ему тип double 
            // (можно int, но тогда будут только целые числа)
            double numA = Convert.ToDouble(Console.ReadLine());
            // Просим ввести B
            Console.Write("B: ");
            // Степень у нас натуральная, то есть целое число, поэтому тип int
            int numB = Convert.ToInt32(Console.ReadLine());
            // Далее мы напишем функцию с названием GetExponen 
            // (переводится как получить возведение в степень)
            // Ниже мы объявим переменную double result 
            // (тип double т.к результат возведения в степень дробного числа тоже чаще всего 
            // выводит дробное число)
            // Ниже мы ссылаемся на функцию GetExponen и кладет в нее значение A и B,
            // через переменные numA и numB,т.к. переменные уже были объявленны выше, 
            // тип мы им не пишем
            double result = GetExponen(numA, numB);
            // Выводим результат на консольЭ, можно так
            Console.WriteLine($"Число {numA} в степени {numB} равно {result}");
            // или так
            Console.WriteLine($"{numA}^{numB} = {result}");
            // или можно так вместо того что написанно выше, убрать 3 строки кода выше
            Console.WriteLine($"Число {numA} в степени {numB} равно {GetExponen(numA, numB)}");
        }
        // Объявляет метод(функцию) GetExponen, в скобках пишем переменные,
        // в которые мы вкладываем значения переменных numA и numB
        // Так как задаются новые переменные, им нужно присвоить тип
        public static double GetExponen(double A, int B)
        {
            // Как раз в этом методе будем писать цикл, который потом вернет итоговое значение
            // записанное в переменную res и вернет в Main с помощью команды return
            // Напишем через цикл for
            // Перед эти объявим переменную res, в нее будет за каждый этап цикла 
            // собираться промежуточные значения умножения пока не совершим их определенное количество раз
            double res = 1; // 1 потому что будет умножение. при умножение на 1, результат не меняется
            // здесь мы пишем что res это результат умножение res=1 и A, что значит что если бы у нас
            // была степень 2, A^2 = A*A, мы уже записали первое A из произведения
            res = res*A; 
            // Цикл ограничили до B, например если B=2, при i = 1 и идущей до B, 
            // цикл у нас выполнит команду записанную в фигурных скопках цикла 1 раз,
            // то есть умножит res написанный выше на A, что равносильно написанию A*A
            for(int i = 1; i < B; i++)
            {
                res = res*A;
            }
            // Возвращаем конечное значение res после всех этапов цикла
            return res;
        }
        
    }
}